plugins {
    id "fabric-loom" version "0.12-SNAPSHOT"
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "com.modrinth.minotaur" version "2.+"
}

version = project.mod_version + "-fabric-" + project.minecraft_suffix
group = project.maven_group
archivesBaseName = project.mod_id

sourceCompatibility = JavaLanguageVersion.of(project.java_target)
targetCompatibility = JavaLanguageVersion.of(project.java_target)

println("Java: " + System.getProperty("java.version") + " JVM: " + System.getProperty("java.vm.version") + "(" + System.getProperty("java.vendor") + ") Arch: " + System.getProperty("os.arch"))

// Keep parameter names when compiling
compileJava.options.compilerArgs.add '-parameters'

repositories {
    maven {
        url "https://www.cursemaven.com"
    }
}

dependencies {
    // Minecraft
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    // Official mappings
    mappings loom.officialMojangMappings()

    // Fabric Loader
    modImplementation "net.fabricmc:fabric-loader:${project.fabric_loader_version}"
    // Fabric API
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_api_version}"
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir "src/generated/resources" }

processResources {
    inputs.property "version", project.version

    filesMatching(["fabric.mod.json", "modid.mixins.json", "pack.mcmeta"]) {
        expand project.properties
    }

    exclude "**/*.pdn"

    rename "^modid.accesswidener\$", "${project.mod_id}.accesswidener"
    rename "^modid.mixins.json\$", "${project.mod_id}.mixins.json"
    rename "^icon.png\$", "${project.mod_id}.png"
}

loom {
    accessWidenerPath = file("src/main/resources/modid.accesswidener")

    loom {
        runs {
            // This adds a new gradle task that runs the datagen API: "gradlew runDatagenClient"
            datagenClient {
                inherit client
                name "Minecraft Datagen"
                vmArg "-Dfabric-api.datagen"
                vmArg "-Dfabric-api.datagen.modid=${project.mod_id}"
                vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
                vmArg "-Dfabric-api.datagen.manual-dir=${file("src/main/resources")}"

                ideConfigGenerated = true
                runDir "build/datagen"
            }
        }
    }

    // TODO make test classes get loaded somehow ¯\(o_o)/¯
//    runs {
//        client {
//            source = sourceSets.test
//        }
//    }
//    runConfigs.configureEach {
//        source = sourceSets.test
//    }

//    runs {
//        testmodClient {
//            client()
//            name = "Testmod Client"
//            source sourceSets.test
//        }
//        testmodServer {
//            server()
//            name = "Testmod Server"
//            source sourceSets.test
//        }
//    }
}

tasks.withType(JavaCompile).configureEach {
    // Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
    it.options.release = Integer.parseInt((String) project.java_target)
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
}

// CurseGradle settings for uploading to CurseForge
curseforge {
    project {
        // Get the CurseForge token from the environment variables
        apiKey = System.getenv("CURSEFORGE_TOKEN")
        // Copy settings from gradle.properties
        id = project.curseforge_project_id
        releaseType = project.curseforge_release_type
        project.curseforge_game_versions.split(" ").each it::addGameVersion
        addGameVersion("Fabric")
        // Point to 'changelog' setting to a the changelog file
        changelog = file("changelog.md")
        changelogType = "markdown"
        if (!project.curseforge_required_dependency_ids.isEmpty() || !project.curseforge_optional_dependency_ids.isEmpty()) {
            relations {
                // Required dependencies
                if (!project.curseforge_required_dependency_ids.isEmpty())
                    project.curseforge_required_dependency_ids.split(" ").each it::requiredDependency
                // Optional dependencies
                if (!project.curseforge_optional_dependency_ids.isEmpty())
                    project.curseforge_optional_dependency_ids.split(" ").each it::optionalDependency
            }
        }

        mainArtifact(jar) {
            displayName = "${project.mod_name} ${project.mod_version} for Fabric ${project.minecraft_suffix.substring(2)}"
        }
    }
    options {
        // Don't add project Java version
        javaVersionAutoDetect = false
    }
}

// Move CurseGradle's tasks from 'upload' to 'publishing'
project.gradle.taskGraph.whenReady {
    tasks.stream().filter(task -> task.group.equals "upload").each { task -> task.group = "publishing" }
}

// Minotaur settings for uploading to Modrinth
modrinth {
    // Get the Modrinth token from the environment variables
    token = System.getenv("MODRINTH_TOKEN")
    // Copy settings from gradle.properties
    projectId = project.modrinth_project_id
    versionNumber = version
    versionType = project.modrinth_release_type // Can be either 'release', 'alpha', or 'beta'
    versionName = "${project.mod_name} ${project.mod_version}"
    gameVersions = project.modrinth_game_versions.split(" ") as List
    // Convert the changelog file to text
    changelog = file("changelog.md").text
    uploadFile = jar // With Loom, this MUST be set to `remapJar` instead of `jar`!
    loaders = ["fabric"]
    dependencies {
        // Required dependencies
        if (!project.modrinth_required_dependency_ids.isEmpty())
            project.modrinth_required_dependency_ids.split(" ").each required::project
        // Optional dependencies
        if (!project.modrinth_optional_dependency_ids.isEmpty())
            project.modrinth_optional_dependency_ids.split(" ").each optional::project
    }
}

// Create a task to upload to both CurseForge and Modrinth
task publishAll {
    group "publishing"
    dependsOn("curseforge", "modrinth")
    // Also build the file so I have a copy locally
    dependsOn "build"
}
