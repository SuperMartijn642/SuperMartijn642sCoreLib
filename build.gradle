plugins {
    id "eclipse"
    id "idea"
    id "java-library"
    id "net.minecraftforge.gradle" version "6.0.25"
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "com.modrinth.minotaur" version "2.+"
    id "org.spongepowered.mixin" version "0.7.+"
}

version = project.mod_version + "-forge-" + project.minecraft_suffix
group = project.maven_group
base.archivesName = project.mod_id

java.toolchain.languageVersion = JavaLanguageVersion.of(project.java_target)

println("Java: " + System.getProperty("java.version") + " JVM: " + System.getProperty("java.vm.version") + "(" + System.getProperty("java.vendor") + ") Arch: " + System.getProperty("os.arch"))

// Keep parameter names when compiling
compileJava.options.compilerArgs.add '-parameters'

repositories {
    maven {
        url "https://www.cursemaven.com"
    }
    maven {
        url = "https://repo.spongepowered.org/maven"
    }
}

dependencies {
    // Forge
    minecraft "net.minecraftforge:forge:${project.minecraft_version}-${project.forge_version}"

    // SpongePowered Mixin
    annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
    implementation("org.spongepowered:mixin:0.8.2") {
        exclude module: "guava"
        exclude module: "commons-io"
        exclude module: "gson"
    }

    // SpongeForge
    compileOnly("org.spongepowered:spongeforge:1.12.2-2838-7.4.7") {
        transitive = false
    }
}

// Include resources generated by data generators.
sourceSets.main {
    resources.srcDir "src/generated/resources"
    // Make sure resources are available for 1.12
    output.setResourcesDir output.classesDirs.asPath
}

processResources {
    inputs.property "version", project.version

    filesMatching(["mcmod.info", "modid.mixins.json", "pack.mcmeta"]) {
        expand project.properties
    }

    exclude "**/*.pdn"

    rename "^modid.mixins.json\$", "${project.mod_id}.mixins.json"
    rename "^icon.png\$", "${project.mod_id}.png"
    rename "^accesstransformer.cfg\$", "${project.mod_id}-accesstransformer.cfg"
}

minecraft {
    mappings channel: project.mappings_channel, version: project.mappings_version

    accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")

    String resolved_core_plugin = "${project.mod_package}.${project.coremod_package}.${project.coremod_class}"
    String resolved_core_config = "${project.mod_id}.mixins.json"

    runs {
        configureEach {
            workingDirectory project.file('run')

            property "forge.logging.markers", "REGISTRIES"
            property "fml.coreMods.load", resolved_core_plugin

            args "--mixin", resolved_core_config

            mods {
                supermartijn642corelib {
                    source sourceSets.main
                }
//                corelibtestmod {
//                    source sourceSets.test
//                }
            }
        }

        client {
        }

        server {
        }

        data {
            parent runs.client
            property "--generatorModid", project.mod_id
            property "--output", file("src/generated/resources/")
            property "--existing", file("$buildDir/data_resources")
        }
    }
}

task processSources(type: Sync) {
    from sourceSets.main.java
    into "$buildDir/sources"
    inputs.property 'version', version

    // Replace mod properties in main mod class
    Hashtable<String, String> properties = new Hashtable<>()
    project.properties.entrySet().stream()
            .filter(entry -> entry.key instanceof String && entry.value instanceof String)
            .forEach(entry -> properties.put(entry.key, entry.value))
    filesMatching(project.mod_package.replace('.', '/') + "/" + project.mod_main_class + ".java") {
        //noinspection UnnecessaryQualifiedReference
        filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: properties)
    }
}

compileJava {
    source = processSources.outputs
}

mixin {
    // MixinGradle Settings
    add sourceSets.main, "${project.mod_id}.mixins.refmap.json"
}

jar {
    from {
        configurations.compileClasspath
                .filter { "mixin-0.8.2.jar" == it.name }
                .collect { it.isDirectory() ? it : zipTree(it) }
    } {
        exclude "LICENSE.txt", "META-INF/MANIFSET.MF", "META-INF/maven/**", "META-INF/*.RSA", "META-INF/*.SF"
    }

    manifest {
        attributes "FMLCorePlugin": "com.supermartijn642.core.coremod.CoreModPlugin"
        attributes "FMLCorePluginContainsFMLMod": "true"
        attributes "ForceLoadAsMod": "true"
        attributes "TweakClass": "org.spongepowered.asm.launch.MixinTweaker"
        attributes "TweakOrder": "0"
        attributes "MixinConfigs": "supermartijn642corelib.mixins.json"
    }
}

//jar.finalizedBy('reobfJar')

tasks.register('javadocJar', Jar) {
    dependsOn javadoc
    group = "documentation"
    archiveClassifier = "javadoc"
    from javadoc.destinationDir
}

tasks.register('sourcesJar', Jar) {
    dependsOn classes
    group = "documentation"
    archiveClassifier = "sources"
    from sourceSets.main.allSource
}

tasks.register('prepareDataResources', Sync) {
    from file("src/main/resources")
    into "$buildDir/data_resources"
    inputs.property "version", version

    filesMatching(["META-INF/mods.toml", "modid.mixins.json", "pack.mcmeta"]) {
        expand project.properties
    }

    exclude "**/*.pdn"

    rename "^modid.mixins.json\$", "${project.mod_id}.mixins.json"
    rename "^icon.png\$", "${project.mod_id}.png"
    rename "^accesstransformer.cfg\$", "${project.mod_id}-accesstransformer.cfg"
}

// Run prepareDataResources before prepareRunData
tasks.configureEach {
    if (it.name == "prepareRunData")
        it.dependsOn "prepareDataResources"
}

// CurseGradle settings for uploading to CurseForge
curseforge {
    project {
        // Get the CurseForge token from the environment variables
        apiKey = System.getenv("CURSEFORGE_TOKEN")
        // Copy settings from gradle.properties
        id = project.curseforge_project_id
        releaseType = project.curseforge_release_type
        project.curseforge_game_versions.split(" ").each it::addGameVersion
        addGameVersion("Forge")
        addGameVersion("NeoForge")
        // Point to 'changelog' setting to a the changelog file
        changelog = file("changelog.md")
        changelogType = "markdown"
        if (!project.curseforge_required_dependency_ids.isEmpty() || !project.curseforge_optional_dependency_ids.isEmpty()) {
            relations {
                // Required dependencies
                if (!project.curseforge_required_dependency_ids.isEmpty())
                    project.curseforge_required_dependency_ids.split(" ").each it::requiredDependency
                // Optional dependencies
                if (!project.curseforge_optional_dependency_ids.isEmpty())
                    project.curseforge_optional_dependency_ids.split(" ").each it::optionalDependency
            }
        }

        mainArtifact(file('build/renamedLibs/_' + jar.getArchiveFileName().get())) {
            displayName = "${project.mod_name} ${project.mod_version} for Forge ${project.minecraft_suffix.substring(2)}"
        }
    }
    options {
        // Don't add project Java version
        javaVersionAutoDetect = false
    }
}

// Move CurseGradle's tasks from 'upload' to 'publishing'
project.gradle.taskGraph.whenReady {
    tasks.stream().filter(task -> task.group.equals "upload").each { task -> task.group = "publishing" }
}

// Minotaur settings for uploading to Modrinth
modrinth {
    // Get the Modrinth token from the environment variables
    token = System.getenv("MODRINTH_TOKEN")
    // Copy settings from gradle.properties
    projectId = project.modrinth_project_id
    versionNumber = version
    versionType = project.modrinth_release_type // Can be either 'release', 'alpha', or 'beta'
    versionName = "${project.mod_name} ${project.mod_version}"
    gameVersions = project.modrinth_game_versions.split(" ") as List
    // Convert the changelog file to text
    changelog = file("changelog.md").text
    uploadFile = file('build/renamedLibs/_' + jar.getArchiveFileName().get())
    // With Loom, this MUST be set to `remapJar` instead of `jar`!
    loaders = ["forge", "neoforge"]
    if (!project.modrinth_required_dependency_ids.isEmpty() || !project.modrinth_optional_dependency_ids.isEmpty()) {
        dependencies {
            // Required dependencies
            if (!project.modrinth_required_dependency_ids.isEmpty())
                project.modrinth_required_dependency_ids.split(" ").each required::project
            // Optional dependencies
            if (!project.modrinth_optional_dependency_ids.isEmpty())
                project.modrinth_optional_dependency_ids.split(" ").each optional::project
        }
    }
}

// Create task which copies from 'jar', but renames the file
tasks.register('renameJar', Copy) {
    dependsOn build
    from jar
    into 'build/renamedLibs'
    rename "_"::concat
}
jar.finalizedBy renameJar

// Create a task to upload to both CurseForge and Modrinth
task publishAll {
    group "publishing"
    dependsOn("curseforge", "modrinth")
    // Also build the file so I have a copy locally
    dependsOn "build"
}
